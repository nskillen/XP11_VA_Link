// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DataRef.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xp11VaLink {

  /// <summary>Holder for reflection information generated from DataRef.proto</summary>
  public static partial class DataRefReflection {

    #region Descriptor
    /// <summary>File descriptor for DataRef.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataRefReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1EYXRhUmVmLnByb3RvEgx4cDExX3ZhX2xpbmsiHgoOUmVxdWVzdERhdGFS",
            "ZWYSDAoEbmFtZRgBIAEoCSIeCg5JbnZhbGlkRGF0YVJlZhIMCgRuYW1lGAEg",
            "ASgJItgBCgxEYXRhUmVmVmFsdWUSDAoEbmFtZRgBIAEoCRI0CgR0eXBlGAIg",
            "ASgOMiYueHAxMV92YV9saW5rLkRhdGFSZWZWYWx1ZS5EYXRhUmVmVHlwZRIN",
            "CgVjb3VudBgDIAEoDRIMCgRpbnRzGAQgAygPEg4KBmZsb2F0cxgFIAMoAhIP",
            "Cgdkb3VibGVzGAYgAygBEg0KBWJ5dGVzGAcgASgMIjcKC0RhdGFSZWZUeXBl",
            "EgcKA0lOVBAAEgkKBUZMT0FUEAESCgoGRE9VQkxFEAISCAoEQllURRADYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xp11VaLink.RequestDataRef), global::Xp11VaLink.RequestDataRef.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xp11VaLink.InvalidDataRef), global::Xp11VaLink.InvalidDataRef.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xp11VaLink.DataRefValue), global::Xp11VaLink.DataRefValue.Parser, new[]{ "Name", "Type", "Count", "Ints", "Floats", "Doubles", "Bytes" }, null, new[]{ typeof(global::Xp11VaLink.DataRefValue.Types.DataRefType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RequestDataRef : pb::IMessage<RequestDataRef> {
    private static readonly pb::MessageParser<RequestDataRef> _parser = new pb::MessageParser<RequestDataRef>(() => new RequestDataRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestDataRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xp11VaLink.DataRefReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDataRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDataRef(RequestDataRef other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDataRef Clone() {
      return new RequestDataRef(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestDataRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestDataRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestDataRef other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvalidDataRef : pb::IMessage<InvalidDataRef> {
    private static readonly pb::MessageParser<InvalidDataRef> _parser = new pb::MessageParser<InvalidDataRef>(() => new InvalidDataRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvalidDataRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xp11VaLink.DataRefReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvalidDataRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvalidDataRef(InvalidDataRef other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvalidDataRef Clone() {
      return new InvalidDataRef(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvalidDataRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvalidDataRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvalidDataRef other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataRefValue : pb::IMessage<DataRefValue> {
    private static readonly pb::MessageParser<DataRefValue> _parser = new pb::MessageParser<DataRefValue>(() => new DataRefValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataRefValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xp11VaLink.DataRefReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRefValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRefValue(DataRefValue other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      count_ = other.count_;
      ints_ = other.ints_.Clone();
      floats_ = other.floats_.Clone();
      doubles_ = other.doubles_.Clone();
      bytes_ = other.bytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRefValue Clone() {
      return new DataRefValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Xp11VaLink.DataRefValue.Types.DataRefType type_ = global::Xp11VaLink.DataRefValue.Types.DataRefType.Int;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xp11VaLink.DataRefValue.Types.DataRefType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "ints" field.</summary>
    public const int IntsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_ints_codec
        = pb::FieldCodec.ForSFixed32(34);
    private readonly pbc::RepeatedField<int> ints_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ints {
      get { return ints_; }
    }

    /// <summary>Field number for the "floats" field.</summary>
    public const int FloatsFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_floats_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> floats_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Floats {
      get { return floats_; }
    }

    /// <summary>Field number for the "doubles" field.</summary>
    public const int DoublesFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_doubles_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> doubles_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Doubles {
      get { return doubles_; }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 7;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return bytes_; }
      set {
        bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataRefValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataRefValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Count != other.Count) return false;
      if(!ints_.Equals(other.ints_)) return false;
      if(!floats_.Equals(other.floats_)) return false;
      if(!doubles_.Equals(other.doubles_)) return false;
      if (Bytes != other.Bytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Xp11VaLink.DataRefValue.Types.DataRefType.Int) hash ^= Type.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= ints_.GetHashCode();
      hash ^= floats_.GetHashCode();
      hash ^= doubles_.GetHashCode();
      if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Xp11VaLink.DataRefValue.Types.DataRefType.Int) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      ints_.WriteTo(output, _repeated_ints_codec);
      floats_.WriteTo(output, _repeated_floats_codec);
      doubles_.WriteTo(output, _repeated_doubles_codec);
      if (Bytes.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Bytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Xp11VaLink.DataRefValue.Types.DataRefType.Int) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += ints_.CalculateSize(_repeated_ints_codec);
      size += floats_.CalculateSize(_repeated_floats_codec);
      size += doubles_.CalculateSize(_repeated_doubles_codec);
      if (Bytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataRefValue other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Xp11VaLink.DataRefValue.Types.DataRefType.Int) {
        Type = other.Type;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      ints_.Add(other.ints_);
      floats_.Add(other.floats_);
      doubles_.Add(other.doubles_);
      if (other.Bytes.Length != 0) {
        Bytes = other.Bytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Xp11VaLink.DataRefValue.Types.DataRefType) input.ReadEnum();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 34:
          case 37: {
            ints_.AddEntriesFrom(input, _repeated_ints_codec);
            break;
          }
          case 42:
          case 45: {
            floats_.AddEntriesFrom(input, _repeated_floats_codec);
            break;
          }
          case 50:
          case 49: {
            doubles_.AddEntriesFrom(input, _repeated_doubles_codec);
            break;
          }
          case 58: {
            Bytes = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataRefValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DataRefType {
        [pbr::OriginalName("INT")] Int = 0,
        [pbr::OriginalName("FLOAT")] Float = 1,
        [pbr::OriginalName("DOUBLE")] Double = 2,
        [pbr::OriginalName("BYTE")] Byte = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
